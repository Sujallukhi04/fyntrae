generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?
  currentTeamId String?
  weekStart     WeekStart
  isPlaceholder Boolean   @default(false)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  accounts           Account[]
  profilePicUrl      String?
  profilePicPublicId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currentTeam        Organizations?           @relation("UserCurrentTeam", fields: [currentTeamId], references: [id], onDelete: SetNull)
  ownedOrganizations Organizations[]          @relation("OrganizationOwner")
  members            Member[]
  invitations        OrganizationInvitation[]
  projectMembers     ProjectMember[]
  timeEntries        TimeEntry[]
  refreshTokens      RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique   
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Tokens {
  id      String     @id @default(cuid())
  email   String
  token   String     @unique
  expires DateTime
  type    TokenTypes

  @@unique([email, type])
  @@index([email, type])
}

model Organizations {
  id                           String   @id @default(cuid())
  userId                       String
  name                         String
  personalTeam                 Boolean
  dateFormat                   String
  currency                     String
  employeesCanSeeBillableRates Boolean  @default(false)
  billableRates                Int?
  intervalFormat               String
  timeFormat                   String
  numberFormat                 String
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  currentTeamUsers User[]                   @relation("UserCurrentTeam")
  owner            User                     @relation("OrganizationOwner", fields: [userId], references: [id], onDelete: Cascade)
  members          Member[]
  invitations      OrganizationInvitation[]
  clients          Client[]
  projects         Project[]
  tasks            Task[]
  tags             Tag[]
  timeEntries      TimeEntry[]
  reports          Report[]
}

model Member {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  billableRate   Int?
  role           Role     @default(EMPLOYEE)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organizations   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projectMembers ProjectMember[]
  timeEntries    TimeEntry[]

  @@unique([userId, organizationId])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  role           Role             @default(EMPLOYEE)
  invitedBy      String
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  resendCount  Int       @default(0)
  lastReSentAt DateTime?

  organization Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User          @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
}

model Client {
  id             String    @id @default(cuid())
  name           String
  organizationId String
  archivedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  projects     Project[]

  @@unique([organizationId, name])
}

model Project {
  id             String    @id @default(cuid())
  name           String
  color          String
  billable       Boolean   @default(true)
  billableRate   Int?
  estimatedTime  Int?
  isActive       Boolean   @default(true)
  isArchived     Boolean   @default(false)
  spentTime      Int       @default(0)
  organizationId String
  clientId       String?
  archivedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization Organizations   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  client       Client?         @relation(fields: [clientId], references: [id], onDelete: SetNull)
  members      ProjectMember[]
  tasks        Task[]
  timeEntries  TimeEntry[]

  @@unique([organizationId, name])
}

model ProjectMember {
  id           String   @id @default(cuid())
  projectId    String
  memberId     String
  userId       String
  billableRate Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, memberId])
}

model Task {
  id             String   @id @default(cuid())
  name           String
  projectId      String
  organizationId String
  estimatedTime  Int?
  spentTime      Int      @default(0)
  status         Status
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  project      Project       @relation(fields: [projectId], references: [id], onDelete: Restrict)
  organization Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  timeEntries  TimeEntry[]
}

model Tag {
  id             String    @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  organization Organizations  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  timeEntries  TimeEntryTag[]
}

model TimeEntry {
  id             String    @id @default(cuid())
  description    String
  start          DateTime
  end            DateTime?
  duration       Int
  billableRate   Int?
  billable       Boolean
  isImported     Boolean   @default(false)
  userId         String
  organizationId String
  projectId      String?
  taskId         String?
  memberId       String
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project      Project?      @relation(fields: [projectId], references: [id], onDelete: Restrict)
  task         Task?         @relation(fields: [taskId], references: [id], onDelete: Restrict)
  member       Member        @relation(fields: [memberId], references: [id], onDelete: Restrict)

  tags TimeEntryTag[]
}

model TimeEntryTag {
  timeEntryId String
  tagId       String

  timeEntry TimeEntry @relation(fields: [timeEntryId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Restrict)

  @@id([timeEntryId, tagId])
}

model Report {
  id             String    @id @default(cuid())
  name           String
  description    String?
  organizationId String
  isPublic       Boolean   @default(false)
  publicUntil    DateTime?
  shareSecret    String?
  properties     Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization Organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum WeekStart {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
  PLACEHOLDER
}

enum Status {
  ACTIVE
  DONE
}

enum InvitationStatus {
  PENDING
  EXPIRED
}

enum TokenTypes {
  EmailVerification
  PasswordReset
}
